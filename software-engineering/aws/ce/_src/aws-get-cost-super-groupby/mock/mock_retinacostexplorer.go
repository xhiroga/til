// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/retinacostexplorer/retinacostexplorer.go

// Package mock_retinacostexplorer is a generated GoMock package.
package mock_retinacostexplorer

import (
	reflect "reflect"

	costexplorer "github.com/aws/aws-sdk-go/service/costexplorer"
	gomock "github.com/golang/mock/gomock"
)

// MockCostExplorer is a mock of CostExplorer interface.
type MockCostExplorer struct {
	ctrl     *gomock.Controller
	recorder *MockCostExplorerMockRecorder
}

// MockCostExplorerMockRecorder is the mock recorder for MockCostExplorer.
type MockCostExplorerMockRecorder struct {
	mock *MockCostExplorer
}

// NewMockCostExplorer creates a new mock instance.
func NewMockCostExplorer(ctrl *gomock.Controller) *MockCostExplorer {
	mock := &MockCostExplorer{ctrl: ctrl}
	mock.recorder = &MockCostExplorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCostExplorer) EXPECT() *MockCostExplorerMockRecorder {
	return m.recorder
}

// GetCostAndUsage mocks base method.
func (m *MockCostExplorer) GetCostAndUsage(input *costexplorer.GetCostAndUsageInput) (*costexplorer.GetCostAndUsageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCostAndUsage", input)
	ret0, _ := ret[0].(*costexplorer.GetCostAndUsageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCostAndUsage indicates an expected call of GetCostAndUsage.
func (mr *MockCostExplorerMockRecorder) GetCostAndUsage(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCostAndUsage", reflect.TypeOf((*MockCostExplorer)(nil).GetCostAndUsage), input)
}
